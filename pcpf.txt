////////////////////////////////////////////////////////////////////////////////
SUM OF ODD AND EVEN NUMBER IN PROLOG:-

iseven(N):- 0 is mod(N,2).
sum([],[0,0]).
sum([X|Xs],[N1,N2]):- sum([Xs,[N3,N4]),
( iseven(X) 
-> N1 is N3+X, N2 is N4
; N2 is N4+X, N1 is N3
).

///////////////////////////////////////////////////////////////////////////////
FACTORIAL IN PROLOG:-

fact (0,1).
fact (N,F):- X is N-1, fact(X,Y), F is N*Y.

//////////////////////////////////////////////////////////////////////////////
CUBE OF NUMBERS IN A LIST IN PROLOG:-

cubes([],Ts).
cubes([X|Xs],Ts):- T is X*X*X, write(T),nl, cubes(Xs,[T|Ts]).

/////////////////////////////////////////////////////////////////////////////
MULTIPLICATION TABLE IN PROLOG:-

multi(N,T,T):- A is N*T, write(A).
multi(N,T,C):- A is N*C, write(A),nl, D is C+1, multi(N,T,D).

/////////////////////////////////////////////////////////////////////////////	
SUM OF ODD NUMBERS IN HASKELL:-

sum1 0 = 0
sum1 n = ((n*2)-1) + sum1(n-1)

main = do
  print(sum1 5)

////////////////////////////////////////////////////////////////////////////
FIBONACCI IN HASKELL:-

fibo n|n==0=0
fibo n|n==1=1 
fibo n|n/=0= fibo(n-1)+fibo(n-2)

main = do
  putStrLn("Enter number")
  ain<-getLine
  let n = (read ain :: Int)
  print(fibo n)

//////////////////////////////////////////////////////////////////////////
LENGTH OF LIST IN HASKELL:-

mapf [] = 0
mapf (x:xs) = 1+ mapf(xs)

main = do
  print(mapf [1,2])

/////////////////////////////////////////////////////////////////////////
SQUARING NUMBERS IN A LIST IN HASKELL:-

sqr1 [] z = reverse z
sqr1 (x:xs) z = sqr1 xs ((x*x):z)

main = do
  print(sqr1 [1,3,5] [])

////////////////////////////////////////////////////////////////////////
AREA AND PERIMETER OF SHAPES:-

//TRIANGLE:-
trianglearea b h = (1*b*h)/2
triangleperi a b c = a+b+c

main = do
  hin<-getLine
  bin<-getLine
  cin<-getLine
  let base= (read bin :: Float)
  let height =(read hin :: Float)
  let side = (read cin :: Float)
  
  print(triangleperi base height side)
  print(trianglearea base height)

//RECTANGLE:-
rectanglearea l b = l*b
rectangleperimeter l b = (2*(l+b))

main = do
  lin<-getLine
  bin<-getLine
  let length1 = (read lin :: Int)
  let breadth = (read bin :: Int)
  print(rectangleperimeter length1 breadth)
  print(rectanglearea length1 breadth)

//CIRCLE:-
circlearea r = 3.14*r*r
circleperimeter r = 2*3.14*r

main = do
  rin<-getLine
  let radius = (read rin :: Float)
  print(circleperimeter radius)
  print(circlearea radius)

//CUBE:-
cubevolume v = v*v*v
cubearea s = 6*s*s

main = do
  vin<-getLine
  let side = (read vin :: Float)
  print(cubevolume side)
  print(cubearea side)

////////////////////////////////////////////////////////////
Fibonacci in Prolog

fibo(0,0).
      fibo(1,1).
      fibo(N,Ans):-
      N >1,
      N1 is N-1,
      N2 is N-2,
      fibo(N1,A1),
      fibo(N2,A2),
      Ans is A1+A2.
